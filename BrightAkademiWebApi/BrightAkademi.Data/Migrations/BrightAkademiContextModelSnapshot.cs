// <auto-generated />
using System;
using BrightAkademi.Data.Concrete.EfCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrightAkademi.Data.Migrations
{
    [DbContext(typeof(BrightAkademiContext))]
    partial class BrightAkademiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(645),
                            Description = "Kategorisi silinenleri buraya atacağız",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(648),
                            Name = "Genel",
                            Url = "genel"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(651),
                            Description = "Full Stack Web Developer",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(651),
                            Name = "Full Stack Web Developer",
                            Url = "full-stack-web-developer"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(652),
                            Description = "IOS Developer",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(653),
                            Name = "IOS Developer",
                            Url = "ios-developer"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(654),
                            Description = "BackEnd Developer",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(655),
                            Name = "BackEnd Developer",
                            Url = "backend-developer"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(656),
                            Description = "FrontEnd Developer",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(656),
                            Name = "FrontEnd Developer",
                            Url = "frontend-developer"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(658),
                            Description = "Java Developer",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(658),
                            Name = "Java Developer",
                            Url = "java-developer"
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Yazılım eğitimi veren ana kucağı",
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(1324),
                            Email = "info.wissenakademie.com",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(1327),
                            Name = "Wissen Akademie",
                            PhoneNumber = "1234567890"
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.CourseStudent", b =>
                {
                    b.Property<int?>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseStudents");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            CourseId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            CourseId = 2,
                            StudentId = 3
                        },
                        new
                        {
                            CourseId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            CourseId = 3,
                            StudentId = 5
                        },
                        new
                        {
                            CourseId = 3,
                            StudentId = 6
                        },
                        new
                        {
                            CourseId = 4,
                            StudentId = 7
                        },
                        new
                        {
                            CourseId = 4,
                            StudentId = 8
                        },
                        new
                        {
                            CourseId = 5,
                            StudentId = 9
                        },
                        new
                        {
                            CourseId = 5,
                            StudentId = 10
                        },
                        new
                        {
                            CourseId = 6,
                            StudentId = 1
                        },
                        new
                        {
                            CourseId = 6,
                            StudentId = 2
                        },
                        new
                        {
                            CourseId = 7,
                            StudentId = 3
                        },
                        new
                        {
                            CourseId = 7,
                            StudentId = 4
                        },
                        new
                        {
                            CourseId = 8,
                            StudentId = 5
                        },
                        new
                        {
                            CourseId = 8,
                            StudentId = 6
                        },
                        new
                        {
                            CourseId = 9,
                            StudentId = 7
                        },
                        new
                        {
                            CourseId = 9,
                            StudentId = 8
                        },
                        new
                        {
                            CourseId = 10,
                            StudentId = 9
                        },
                        new
                        {
                            CourseId = 10,
                            StudentId = 10
                        },
                        new
                        {
                            CourseId = 11,
                            StudentId = 1
                        },
                        new
                        {
                            CourseId = 11,
                            StudentId = 2
                        },
                        new
                        {
                            CourseId = 12,
                            StudentId = 3
                        },
                        new
                        {
                            CourseId = 12,
                            StudentId = 4
                        },
                        new
                        {
                            CourseId = 13,
                            StudentId = 5
                        },
                        new
                        {
                            CourseId = 13,
                            StudentId = 6
                        },
                        new
                        {
                            CourseId = 14,
                            StudentId = 7
                        },
                        new
                        {
                            CourseId = 14,
                            StudentId = 8
                        },
                        new
                        {
                            CourseId = 15,
                            StudentId = 9
                        },
                        new
                        {
                            CourseId = 15,
                            StudentId = 10
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(2541),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(2543),
                            Name = "Easy"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(2545),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(2545),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(2546),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(2547),
                            Name = "Senior"
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(9053),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(9055),
                            Name = "Super Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(9057),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(9057),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(9058),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(9059),
                            Name = "Trainer"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(9060),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(9061),
                            Name = "Trainee"
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EducationalStatus")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7751),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7755),
                            UserId = 8
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7757),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7757),
                            UserId = 9
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7759),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7759),
                            UserId = 10
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7761),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7761),
                            UserId = 11
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7762),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7763),
                            UserId = 12
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7764),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7765),
                            UserId = 13
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7766),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7766),
                            UserId = 14
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7768),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7768),
                            UserId = 15
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7769),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7770),
                            UserId = 16
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7771),
                            EducationalStatus = "Kayıtlı öğrenci başlayacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(7772),
                            UserId = 17
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EducationInfo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Experience")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Profession")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "10 puan",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(1955),
                            EducationInfo = "Zonguldak Bilgisayar Öğretmenliği",
                            Experience = "30",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(1958),
                            Profession = "Full Stack Web Developer",
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Comment = "10 puan",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(1960),
                            EducationInfo = "Eskişehir Bilgisayar Mühendisliği",
                            Experience = "10",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(1961),
                            Profession = "IOS Developer",
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            Comment = "10 puan",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(1963),
                            EducationInfo = "Bahçeşehir Üniversitesi Yazılım Mühendisliği",
                            Experience = "2",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(1963),
                            Profession = "Backend Developer",
                            UserId = 5
                        },
                        new
                        {
                            Id = 4,
                            Comment = "10 puan",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(1965),
                            EducationInfo = "Arel Üniversitesi Elektronik Haberleşme Mühendisliği",
                            Experience = "2",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(1965),
                            Profession = "Frontend Developer",
                            UserId = 6
                        },
                        new
                        {
                            Id = 5,
                            Comment = "10 puan",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(1967),
                            EducationInfo = "Doğuş Üniversitesi",
                            Experience = "2",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(1968),
                            Profession = "Java Developer",
                            UserId = 7
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.TeacherCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherCourses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            TeacherId = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2035),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2039)
                        },
                        new
                        {
                            CourseId = 2,
                            TeacherId = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2040),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2041)
                        },
                        new
                        {
                            CourseId = 3,
                            TeacherId = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2042),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2042)
                        },
                        new
                        {
                            CourseId = 4,
                            TeacherId = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2043),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2043)
                        },
                        new
                        {
                            CourseId = 5,
                            TeacherId = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2044),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2045)
                        },
                        new
                        {
                            CourseId = 6,
                            TeacherId = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2046),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2046)
                        },
                        new
                        {
                            CourseId = 7,
                            TeacherId = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2047),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2048)
                        },
                        new
                        {
                            CourseId = 8,
                            TeacherId = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2049),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2049)
                        },
                        new
                        {
                            CourseId = 9,
                            TeacherId = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2050),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2051)
                        },
                        new
                        {
                            CourseId = 10,
                            TeacherId = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2052),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2052)
                        },
                        new
                        {
                            CourseId = 11,
                            TeacherId = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2053),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2054)
                        },
                        new
                        {
                            CourseId = 12,
                            TeacherId = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2055),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2055)
                        },
                        new
                        {
                            CourseId = 13,
                            TeacherId = 5,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2056),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2057)
                        },
                        new
                        {
                            CourseId = 14,
                            TeacherId = 5,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2057),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2058)
                        },
                        new
                        {
                            CourseId = 15,
                            TeacherId = 5,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2059),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 717, DateTimeKind.Local).AddTicks(2059)
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8398),
                            Firstname = "EnesBatuhan",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Admin",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8401),
                            Password = "superadmin",
                            Username = "superadmin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8403),
                            Firstname = "ilkercelik",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Admin",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8404),
                            Password = "admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8405),
                            Firstname = "Ramiz",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Karaeski",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8406),
                            Password = "ramizkaraeski",
                            Username = "ramizkaraeski"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8407),
                            Firstname = "Kenan",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Birkan",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8408),
                            Password = "kenanbirkan",
                            Username = "kenanbirkan"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8409),
                            Firstname = "Ezel",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Bayraktar",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8410),
                            Password = "ezelbayraktar",
                            Username = "ezelbayraktar"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8411),
                            Firstname = "Mehmet",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Tezcan",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8412),
                            Password = "mehmettezcan",
                            Username = "mehmettezcan"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8413),
                            Firstname = "Selma",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Hünel",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8414),
                            Password = "selmahunel",
                            Username = "selmahunel"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8416),
                            Firstname = "Eyşan",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Atay",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8416),
                            Password = "eysanatay",
                            Username = "eysanatay"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8418),
                            Firstname = "Ali",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Kırgız",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8418),
                            Password = "alikizgin",
                            Username = "alikizgin"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8420),
                            Firstname = "Teyfik",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Zaim",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8420),
                            Password = "teyfikzaim",
                            Username = "teyfikzaim"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8422),
                            Firstname = "JeremyRichard",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Figarland",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8422),
                            Password = "figarlandFamily",
                            Username = "JeremyRichard"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8424),
                            Firstname = "Cengiz",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Atay",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8424),
                            Password = "cengizatay",
                            Username = "cengizatay"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8426),
                            Firstname = "Samurai",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Jean",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8426),
                            Password = "jean123Qwer.",
                            Username = "samurai"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8428),
                            Firstname = "Şebnem",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Sertuna",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8428),
                            Password = "sebnemsertuna",
                            Username = "sebnemsertuna"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8430),
                            Firstname = "Temmuz",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Kocaoğlu",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8430),
                            Password = "temmuzkocaoglu",
                            Username = "temmuzkocaoglu"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8432),
                            Firstname = "Bahar",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Tezcan",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8432),
                            Password = "bahartezcan",
                            Username = "bahartezcan"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8434),
                            Firstname = "Azad",
                            IsActive = true,
                            IsDeleted = false,
                            Lastname = "Karaeski",
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(8434),
                            Password = "azadkaraeski",
                            Username = "azadkaraeski"
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9196),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9212),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9213),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9214),
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9215),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9216),
                            RoleId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9217),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9217),
                            RoleId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9219),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9219),
                            RoleId = 3,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9221),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9221),
                            RoleId = 3,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9222),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9223),
                            RoleId = 3,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9224),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9225),
                            RoleId = 4,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9226),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9226),
                            RoleId = 4,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9228),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9228),
                            RoleId = 4,
                            UserId = 10
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9229),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9230),
                            RoleId = 4,
                            UserId = 11
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9231),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9232),
                            RoleId = 4,
                            UserId = 12
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9233),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9233),
                            RoleId = 4,
                            UserId = 13
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9235),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9241),
                            RoleId = 4,
                            UserId = 14
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9242),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9250),
                            RoleId = 4,
                            UserId = 15
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9267),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9268),
                            RoleId = 4,
                            UserId = 16
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9270),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 715, DateTimeKind.Local).AddTicks(9271),
                            RoleId = 4,
                            UserId = 17
                        });
                });

            modelBuilder.Entity("BrightWeb.Entity.Concrete.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Experience")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FinishCourseTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("HowManyMonths")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartCourseTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TotalCourseHours")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LevelId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 2,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "html css bootstrap react react native c# .net javascript node.js ajax",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3153),
                            Description = "Full Stack Developer eğitimi kapsamlı bir eğitim.",
                            Experience = "Bu eğitim sayesinde;Temel ve ileri veritabanı mantığını, Web’in ve yazılımın çalışma prensibini ve tüm süreçlerini, Yeni nesil tüm programlama araç ve dillerini, Back end programlamayı ve API yazmayı, Uçtan uca bir proje geliştirmeyi öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "2",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 1,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3159),
                            Name = "Full Stack Web Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 1,
                            TotalCourseHours = "200"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 2,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "html css bootstrap react react native c# .net javascript node.js ajax",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3176),
                            Description = "Full Stack Developer eğitimi kapsamlı bir eğitim.",
                            Experience = "Bu eğitim sayesinde;Temel ve ileri veritabanı mantığını, Web’in ve yazılımın çalışma prensibini ve tüm süreçlerini, Yeni nesil tüm programlama araç ve dillerini, Back end programlamayı ve API yazmayı, Uçtan uca bir proje geliştirmeyi öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "4",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 2,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3176),
                            Name = "Full Stack Web Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 1,
                            TotalCourseHours = "400"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 2,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "html css bootstrap react react native c# .net javascript node.js ajax",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3181),
                            Description = "Full Stack Developer eğitimi kapsamlı bir eğitim.",
                            Experience = "Bu eğitim sayesinde;Temel ve ileri veritabanı mantığını, Web’in ve yazılımın çalışma prensibini ve tüm süreçlerini, Yeni nesil tüm programlama araç ve dillerini, Back end programlamayı ve API yazmayı, Uçtan uca bir proje geliştirmeyi öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "6",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 3,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3181),
                            Name = "Full Stack Web Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 1,
                            TotalCourseHours = "600"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 3,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "Swift",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3186),
                            Description = "IOS Developer",
                            Experience = "Bu eğitimde IOS Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak swift programını öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "1",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 1,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3186),
                            Name = "IOS Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 2,
                            TotalCourseHours = "100"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 3,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "Swift",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3191),
                            Description = "IOS Developer",
                            Experience = "Bu eğitimde IOS Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak swift programını öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "2",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 2,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3191),
                            Name = "IOS Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 2,
                            TotalCourseHours = "200"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 3,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "Swift",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3195),
                            Description = "IOS Developer",
                            Experience = "Bu eğitimde IOS Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak swift programını öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "3",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 3,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3196),
                            Name = "IOS Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 2,
                            TotalCourseHours = "300"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 4,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "c# .net javascript node.js ajax ",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3200),
                            Description = "Backend Developer",
                            Experience = "Bu eğitimde Backend Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "1",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 1,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3200),
                            Name = "Backend Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 3,
                            TotalCourseHours = "100"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 4,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "c# .net javascript node.js ajax ",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3205),
                            Description = "Backend Developer",
                            Experience = "Bu eğitimde Backend Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "2",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 2,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3205),
                            Name = "Backend Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 3,
                            TotalCourseHours = "200"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 4,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "c# .net javascript node.js ajax ",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3209),
                            Description = "Backend Developer",
                            Experience = "Bu eğitimde Backend Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "3",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 3,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3210),
                            Name = "Backend Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 3,
                            TotalCourseHours = "300"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 5,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "html css bootstrap javascript react react native",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3214),
                            Description = "Frontend Developer",
                            Experience = "Bu eğitimde Frontend Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "1",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 1,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3214),
                            Name = "Frontend Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 4,
                            TotalCourseHours = "100"
                        },
                        new
                        {
                            Id = 11,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 5,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "html css bootstrap javascript react react native",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3218),
                            Description = "Frontend Developer",
                            Experience = "Bu eğitimde Frontend Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "2",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 2,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3219),
                            Name = "Frontend Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 4,
                            TotalCourseHours = "200"
                        },
                        new
                        {
                            Id = 12,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 5,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "html css bootstrap javascript react react native",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3265),
                            Description = "Frontend Developer",
                            Experience = "Bu eğitimde Frontend Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "3",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 3,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3266),
                            Name = "Frontend Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 4,
                            TotalCourseHours = "300"
                        },
                        new
                        {
                            Id = 13,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 6,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "Java",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3271),
                            Description = "Frontend Developer",
                            Experience = "Bu eğitimde Java Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "1",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 1,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3271),
                            Name = "Java Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 5,
                            TotalCourseHours = "100"
                        },
                        new
                        {
                            Id = 14,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 6,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "Java",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3275),
                            Description = "Frontend Developer",
                            Experience = "Bu eğitimde Java Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "2",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 2,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3276),
                            Name = "Java Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 5,
                            TotalCourseHours = "200"
                        },
                        new
                        {
                            Id = 15,
                            Address = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            CategoryId = 6,
                            Comment = "Çok iyi bir kurs 10 puan",
                            CompanyId = 1,
                            Content = "Java",
                            CreatedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3280),
                            Description = "Frontend Developer",
                            Experience = "Bu eğitimde Java Developer olmak adına seçeceğiniz eğitim seviyesine göre eğitim alacak gerekli programları öğreneceksiniz.",
                            FinishCourseTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HowManyMonths = "3",
                            IsActive = false,
                            IsDeleted = false,
                            LevelId = 3,
                            ModifiedDate = new DateTime(2023, 10, 16, 13, 41, 56, 716, DateTimeKind.Local).AddTicks(3280),
                            Name = "Java Developer",
                            Price = 10000,
                            StartCourseTime = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Açılacak",
                            TeacherId = 5,
                            TotalCourseHours = "300"
                        });
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.CourseStudent", b =>
                {
                    b.HasOne("BrightWeb.Entity.Concrete.Course", "Course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrightAkademi.Entity.Concrete.Student", "Student")
                        .WithMany("CourseStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Student", b =>
                {
                    b.HasOne("BrightAkademi.Entity.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("BrightAkademi.Entity.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.TeacherCourse", b =>
                {
                    b.HasOne("BrightWeb.Entity.Concrete.Course", "Course")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrightAkademi.Entity.Concrete.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.UserRole", b =>
                {
                    b.HasOne("BrightAkademi.Entity.Concrete.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrightAkademi.Entity.Concrete.Teacher", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("TeacherId");

                    b.HasOne("BrightAkademi.Entity.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrightWeb.Entity.Concrete.Course", b =>
                {
                    b.HasOne("BrightAkademi.Entity.Concrete.Category", "Category")
                        .WithMany("Course")
                        .HasForeignKey("CategoryId");

                    b.HasOne("BrightAkademi.Entity.Concrete.Company", "Company")
                        .WithMany("Courses")
                        .HasForeignKey("CompanyId");

                    b.HasOne("BrightAkademi.Entity.Concrete.Level", "Level")
                        .WithMany("Courses")
                        .HasForeignKey("LevelId");

                    b.HasOne("BrightAkademi.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Level");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Category", b =>
                {
                    b.Navigation("Course");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Company", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Level", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Student", b =>
                {
                    b.Navigation("CourseStudents");
                });

            modelBuilder.Entity("BrightAkademi.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BrightWeb.Entity.Concrete.Course", b =>
                {
                    b.Navigation("CourseStudents");

                    b.Navigation("TeacherCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
